@inject ToastService toastService
@rendermode InteractiveServer

<div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    @if (ShowToast)
    {
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true" style="min-width: 300px;">
            <div class="toast-header">
                <strong class="me-auto">@ToastType</strong>
                <button type="button" class="btn-close" @onclick="HideToast" aria-label="Zatvori"></button>
            </div>
            <div class="toast-body">
                @ToastMessage
            </div>
        </div>
    }
</div>

@code {
    private bool ShowToast { get; set; }
    private string ToastMessage { get; set; } = string.Empty;
    private string ToastType { get; set; } = "Info";
    private int DismissAfter { get; set; }

    protected override void OnInitialized()
    {
        toastService.OnShow += DisplayToast;
        toastService.OnHide += HideToast;
    }

    private async void DisplayToast(string message, string type, int dismissAfter)
    {
        ToastMessage = message;
        ToastType = type;
        DismissAfter = dismissAfter;
        ShowToast = true;

        StateHasChanged();

        if (dismissAfter > 0)
        {
            await Task.Delay(dismissAfter * 1000);
            HideToast();
        }
    }

    private void HideToast()
    {
        ShowToast = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        toastService.OnShow -= DisplayToast;
        toastService.OnHide -= HideToast;
    }
}
