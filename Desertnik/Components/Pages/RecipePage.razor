@page "/recipes"
@rendermode InteractiveServer
@inject RecipeService recipeService
@inject IngredientService ingredientService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider

<h1 class="text-center mt-4">Recepti</h1>

<div class="container mt-3">
    <div class="row">
        <div class="col-md-6">
            <label>Naziv</label>
            <input class="form-control mb-3" @bind="searchTerm" placeholder="Pretražite po nazivu" />
        </div>
        <div class="col-md-6">
            <label>Sastojci</label>
            <select multiple class="form-select" @onchange="OnIngredientSelectionChanged">
                @foreach (var ingredient in availableIngredients)
                {
                    <option value="@ingredient.Id">@ingredient.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-md-6">
            <label>Od:</label>
            <input type="date" class="form-control" @bind="fromDate" />
        </div>
        <div class="col-md-6">
            <label>Do:</label>
            <input type="date" class="form-control" @bind="toDate" />
        </div>
    </div>
    <div class="mt-4">
        <button class="btn btn-primary" @onclick="SearchRecipes">Pretraži</button>
        <AuthorizeView Roles="Admin, User">
            <button class="btn btn-success ms-2" @onclick="Add">Dodaj recept</button>
        </AuthorizeView>
    </div>

    @if (recipes == null)
    {
        <div class="alert alert-info mt-4">Niti jedan recept nije pronađen!</div>
    }
    else
    {
        <div class="row mt-4">
            @foreach (var recipe in recipes)
            {
                <div class="col-md-4 mb-4">
                    <div class="card">
                        <div class="card-body">
                            @if (!string.IsNullOrEmpty(recipe.ImageUrl))
                            {
                                <div class="d-flex justify-content-center align-items-center" style="height: 25em;">
                                    <img src="@recipe.ImageUrl" alt="Slika recepta" class="img-fluid mb-2"
                                         style="object-fit:contain; width:20em; height:20em;" />
                                </div>
                            }
                            <h5 class="card-title">@recipe.Name</h5>
                            <p class="card-text">@recipe.Description</p>
                            <p class="card-text">
                                <strong>Sastojci:</strong>
                                @string.Join(", ", recipe.Ingredients.Select(i => i.Name))
                            </p>
                            <AuthorizeView Roles="User">
                                @if (recipeOwnership.ContainsKey(recipe.Id) && recipeOwnership[recipe.Id])
                                {
                                    <button class="btn btn-warning btn-sm" @onclick="() => EditRecipe(recipe.Id)">Uredi</button>
                                }
                            </AuthorizeView>
                            <AuthorizeView Roles="Admin">      
                                    <button class="btn btn-warning btn-sm" @onclick="() => EditRecipe(recipe.Id)">Uredi</button>
                            </AuthorizeView>

                            <AuthorizeView Roles="Admin">
                                <button class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteRecipe(recipe.Id)">Obriši</button>
                            </AuthorizeView>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private string searchTerm = string.Empty;
    private DateTime? fromDate;
    private DateTime? toDate;
    private List<Recipe> recipes = new();
    private List<Ingredient> availableIngredients = new();
    private List<string> selectedIngredientIds = new();

    private Dictionary<string, bool> recipeOwnership = new();

    protected override async Task OnInitializedAsync()
    {
        recipes = await recipeService.GetRecipesAsync();
        availableIngredients = await ingredientService.GetIngredientsAsync();
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            foreach (var recipe in recipes)
            {
                recipeOwnership[recipe.Id] = user.Identity.Name == recipe.User.Username;
            }
        }
    }

    private async Task SearchRecipes()
    {
        recipes = await recipeService.SearchRecipesAsync(searchTerm, fromDate, toDate, selectedIngredientIds);
    }

    private void OnIngredientSelectionChanged(ChangeEventArgs e)
    {
        selectedIngredientIds = (e.Value as string[]).ToList();
    }

    private void Add()
    {
        navigationManager.NavigateTo("/add-recipe");
    }

    private void EditRecipe(string id)
    {
        navigationManager.NavigateTo($"/edit-recipe/{id}");
    }

    private void DeleteRecipe(string id)
    {
        recipeService.DeleteRecipeAsync(id);
    }
}