@page "/recipes"
@rendermode InteractiveServer
@inject RecipeService recipeService
@inject IngredientService ingredientService
<h1>Recepti</h1>

<div>
	<label>Pretraži po nazivu:</label>
	<input @bind="searchTerm" placeholder="Naziv recepta..." />
</div>

<div>
	<label>Pretraži po sastojcima:</label>
	<select multiple @onchange="OnIngredientSelectionChanged">
		@foreach (var ingredient in availableIngredients)
		{
			<option value="@ingredient.Id" selected="@(selectedIngredientIds.Contains(ingredient.Id))">@ingredient.Name</option>
		}
	</select>
</div>

<div>
	<label>Pretraži po ocjeni:</label>
	<input type="range" min="0" max="10" step="0.1" @bind="minScore" />
	<span>@minScore:0.0</span>
</div>

<div>
	<label>Pretraži po datumu:</label>
	<div>
		<label>Od:</label>
		<input type="date" @bind="fromDate" />
	</div>
	<div>
		<label>Do:</label>
		<input type="date" @bind="toDate" />
	</div>
</div>

<button @onclick="SearchRecipes">Pretraži</button>

<br />
<br />

@if (recipes == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<button @onclick="@Add" class="btn btn-success">Dodaj recept</button>
	<table class="table">
		<thead>
			<tr>
				<th>ID</th>
				<th>Naziv recepta</th>
				<th>Opis recepta</th>
				<th>Sastojci</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var recipe in recipes)
			{
				<tr @onclick="@(() => Show(recipe.Id))">
					<td>@recipe.Id</td>
					<td>@recipe.Name</td>
					<td>@recipe.Description</td>
					<td>@string.Join(", ", recipe.Ingredients.Select(i => i.Name))</td>
				</tr>
			}
		</tbody>
	</table>
}
@if (mode == MODE.Add)
{
	<input placeholder="Naziv recepta" @bind="@name" />
	<br />
	<input placeholder="Opis recepta" @bind="@description" />
	<br />
	<button @onclick="@Insert" class="btn btn-warning">Spremi recept</button>
}
@if (recipes != null && mode == MODE.EditDelete)
{
	<input type="hidden" @bind="@id" />
	<br />
	<input placeholder="Naziv recepta" @bind="@name" />
	<br />
	<input placeholder="Opis recepta" @bind="@description" />
	<br />
	<button @onclick="@Update" class="btn btn-primary">Ažuriraj recept</button>
	<span>&nbsp;&nbsp;&nbsp;&nbsp;</span> // RAZMACI
	<button @onclick="@Delete" class="btn btn-danger">Obriši recept</button>
}
@code {

	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	string id;
	string name;
	string description;
	Recipe recipe;
	private enum MODE { None, Add, EditDelete };
	MODE mode = MODE.None;

	List<Recipe> recipes = new();

	private List<Ingredient> availableIngredients = new();
	private List<string> selectedIngredientIds = new(); // Koji su sastojci odabrani

	private double minScore = 0.0;

	private DateTime? fromDate;
	private DateTime? toDate;

	private string searchTerm = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await Load();
	}
	protected async Task Load()
	{
		recipes = await recipeService.GetRecipesAsync();
		availableIngredients = await ingredientService.GetIngredientsAsync();
	}

	protected async Task SearchRecipes()
	{
		recipes = await recipeService.SearchRecipesAsync(searchTerm, fromDate, toDate, selectedIngredientIds, minScore > 0 ? minScore : null);
	}

	private void OnIngredientSelectionChanged(ChangeEventArgs e)
	{
		// Multi select specifično zato što je ID string
		selectedIngredientIds = (e.Value as string[]).ToList();
	}

	protected void Add()
	{
		ClearFields();
		mode = MODE.Add;
	}
	protected void ClearFields()
	{
		id = string.Empty;
		name = string.Empty;
		description = string.Empty;
	}

	protected async Task Insert()
	{
		Recipe r = new Recipe()
			{
				Id = Guid.NewGuid().ToString(),
				Name = name,
				Description = description
			};
		await recipeService.InsertRecipeAsync(r);
		ClearFields();
		await Load();
		mode = MODE.None;
	}

	protected async Task Show(string id)
	{
		recipe = await recipeService.GetRecipeByIdAsync(id);
		id = recipe.Id;
		name = recipe.Name;
		description = recipe.Description;
		mode = MODE.EditDelete;
	}

	protected async Task Update()
	{
		Recipe r = new Recipe()
			{
				Id = recipe.Id,
				Name = name,
				Description = description
			};
		await recipeService.UpdateRecipeAsync(recipe.Id, r);
		ClearFields();
		await Load();
		mode = MODE.None;
	}
	protected async Task Delete()
	{
		await recipeService.DeleteRecipeAsync(recipe.Id);
		ClearFields();
		await Load();
		mode = MODE.None;
	}
}
